"use client"; // Because of use sidebar hook usage

// import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

import { useState} from "react";

// Sidebar should always be present
import { SidebarProvider, SidebarTrigger, useSidebar} from "@/components/ui/sidebar";
import { AppSidebar } from "@/components/app-sidebar";

// To conditionally set padding
import { usePathname } from "next/navigation";

// Cart stuff
import { CartItem } from "@/contexts/cart-context";
import { CartContext } from "@/contexts/cart-context";
import { CartSheet } from "@/components/cart/cart-sheet";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// Handle dynamic padding based on sidebar state
function MainContent({children}: {children: React.ReactNode}) {

  const {state, isMobile} = useSidebar();

  let paddingLeft = "0";
  let marginTop = "0";

  const pathname = usePathname();
  // Sidebar is an overlay on mobile, so no padding is needed
  if (!isMobile) {
    // Pad more when sidebar is minimized so content is centered properly
    // There's still some padding when sidebar is expanded because it looks better
    
    if (pathname === "/shop") { // Shop stuff takes up more space, so it has less padding than home page
      paddingLeft = state === "expanded" ? "0rem" : "5.5rem";
      marginTop = state === "expanded" ? "-1.5rem" : "-2rem";
    }
    else { // Should only apply to home page
      paddingLeft = state === "expanded" ? "4.5rem" : "12.5rem";
      marginTop = "0rem";

    }
  }

  return (
      <div className="transition-all duration-500">
      <main>
        <SidebarTrigger />
        {/*
                The SidebarTrigger is used to toggle the sidebar visibility.
                It can be placed anywhere in the layout, but typically it is
                placed in the header or main content area.
              */}
        <div
         style={{paddingLeft, marginTop}}>
          {children}
        </div>
        
      </main>
    </div>
  );
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {


  // Manage cart sheet state
  const [isCartOpen, setIsCartOpen] = useState(false);

  const onCartClick = () => {
    setIsCartOpen(!isCartOpen);
  };

  // Cart functionality
  const [cartItems, setCartItems] = useState<CartItem[]>([]);

  const addToCart = (item: CartItem) => {
    setCartItems((prev) => [...prev, item]);
  };

  const removefromCart = (id: number) => {
    setCartItems((prev) => prev.filter((item) => item.id !== id));
  };

  const incrementQuantity = (id: number) => {
    setCartItems((prev) =>
      prev.map((item) =>
        item.id === id ? { ...item, quantity: item.quantity + 1 } : item
      )
    );
  };

  const updateQuantity = (id: number, quantity: number) => {
    setCartItems((prev) =>
      prev.map((item) =>
        item.id === id ? { ...item, quantity: quantity } : item
      )
    );
  };

  const getTotalItems = () => {
    return cartItems.reduce((total, item) => total + item.quantity, 0);
  };


  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <CartContext.Provider value={{cartItems, addToCart, removefromCart, incrementQuantity, updateQuantity, getTotalItems}}>
          <SidebarProvider>
            <AppSidebar
              onCartClick={onCartClick}
            />
            {/* Cart Sheet */}
            <CartSheet
              isCartOpen={isCartOpen}
              setIsCartOpen={setIsCartOpen}
              cartItems={cartItems}
              getTotalItems={getTotalItems}
            />
            {/* Main content area */}
            <MainContent>
              {children}
            </MainContent>
          </SidebarProvider>
        </CartContext.Provider>
      </body>
    </html>
  );
}
      